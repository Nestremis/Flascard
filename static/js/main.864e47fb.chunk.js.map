{"version":3,"sources":["Flashcard.js","FlashcardList.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashcardList","flashcards","id","App","setFlashcards","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.864e47fb.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function Flashcard ({ flashcard }) {\r\n    const [flip, setFlip] = useState (false)\r\n    const [height, setHeight] = useState('initial')\r\n\r\n    const frontEl = useRef()\r\n    const backEl = useRef()\r\n\r\n    function setMaxHeight() {\r\n        const frontHeight = frontEl.current.getBoundingClientRect().height\r\n        const backHeight = backEl.current.getBoundingClientRect().height\r\n        setHeight ( Math.max(frontHeight, backHeight, 100) )\r\n    }\r\n\r\n    useEffect (setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options] )\r\n\r\n    useEffect (()=> {\r\n        window.addEventListener('resize', setMaxHeight)\r\n        return () => window.removeEventListener('resize', setMaxHeight)\r\n    } , [])\r\n\r\n    return (\r\n        <div \r\n        className = {`card ${flip ? 'flip' : ''}`}\r\n        style = {{ height: height }}\r\n        onClick = {() => setFlip(!flip)} \r\n        >\r\n\r\n            <div className = 'front' ref={frontEl} >\r\n                {flashcard.question}\r\n                <div className = 'flashcards-options'>\r\n                    {flashcard.options.map(option => {\r\n                        return <div className='flashcard-option' key = {option}> {option} </div>\r\n                    }) }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className = 'back' ref = {backEl}> {flashcard.answer} </div>\r\n\r\n        </div>\r\n    )    \r\n};\r\n","import React from 'react';\r\nimport Flashcard from './Flashcard';\r\n\r\nexport default function FlashcardList({ flashcards }) {\r\n    return (\r\n        <div className='card-grid'>\r\n            {flashcards.map(flashcard => {\r\n                return < Flashcard flashcard = {flashcard} key={flashcard.id}  />\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport FlashcardList from './FlashcardList';\nimport './app.css'; \nimport axios from 'axios';\n\nfunction App() {\n  const [ flashcards, setFlashcards ] = useState([])\n  const [categories, setCategories] = useState([])\n\n  const categoryEl = useRef()\n  const amountEl = useRef()\n\n  useEffect(()=> {\n    axios\n      .get('https://opentdb.com/api_category.php') \n      .then(res => {\n        setCategories(res.data.trivia_categories)\n      })\n  }, [])\n\n\n\nfunction decodeString (str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML = str\n    return textArea.value\n}\n\nfunction handleSubmit (e) {\n    e.preventDefault() \n    axios\n    .get ('https://opentdb.com/api.php?difficulty=easy', {params: \n      {amount: amountEl.current.value, \n      category: categoryEl.current.value\n  }} )\n    .then (res => {\n      setFlashcards (res.data.results.map ((questionItem, index) => {\n        const answer = decodeString (questionItem.correct_answer) \n        const options = [\n          ...questionItem.incorrect_answers.map(a => decodeString(a) ), \n          answer\n        ] //random\n        return {\n          id: `${index}-${Date.now}`, // tworzenie unikalnego id przez datÄ™ ? \n          question:  decodeString (questionItem.question), \n          answer: answer, \n          options: options.sort(() => Math.random() - .5 ) //random \n        }} ))\n  })\n}\n\n  return (\n    <>\n      <form className='header' onSubmit={handleSubmit}>\n          <div className='form-group'> \n            <label htmlFor='category'> Category </label>\n            <select id='category' ref={categoryEl}> \n            {categories.map(category => {\n              return <option value={category.id} key = {category.id} > {category.name} </option> \n            })}\n            </select>\n          </div>\n          <div className='form-group'> \n               <label htmlFor='amount'> Number Of Questions </label>\n               <input type='number' id='amount' min='1' step='1' defaultValue={10} ref={amountEl} />\n          </div>\n          <div className='form-group'> \n            <button className='btn'> Generate </button>\n          </div>\n      </form>\n      <div className='coantainer'> \n      <FlashcardList flashcards={flashcards} />\n    </div>\n    </>\n    )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}